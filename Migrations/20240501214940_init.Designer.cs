// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropTrac_backend.Services.Context;

#nullable disable

namespace PropTrac_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240501214940_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PropTrac_backend.Models.DocumentsModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = new byte[] { 1, 2, 3 },
                            Name = "LeaseAgreement",
                            Type = "Lease",
                            UploadDate = new DateTime(2024, 5, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7808)
                        },
                        new
                        {
                            ID = 2,
                            Content = new byte[] { 4, 5, 6 },
                            Name = "LeaseAgreement",
                            Type = "Lease",
                            UploadDate = new DateTime(2024, 5, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7816)
                        },
                        new
                        {
                            ID = 3,
                            Content = new byte[] { 4, 5, 6 },
                            Name = "ManagerList",
                            Type = "Manager",
                            UploadDate = new DateTime(2024, 5, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7823)
                        },
                        new
                        {
                            ID = 4,
                            Content = new byte[] { 4, 5, 6 },
                            Name = "ManagerDoc",
                            Type = "Finance",
                            UploadDate = new DateTime(2024, 5, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7828)
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.MaintenanceModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractorPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Maintenance");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Category = "Plumbing",
                            ContractorEmail = "plumbing@example.com",
                            ContractorName = "Plumbing Pros",
                            ContractorPhone = "123-456-7890",
                            DateRequested = new DateTime(2024, 4, 26, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7922),
                            Description = "There's something wrong with the toilet.",
                            Priority = "Urgent",
                            Status = "To Do",
                            UserID = 3
                        },
                        new
                        {
                            ID = 2,
                            Category = "Electricity",
                            ContractorEmail = "electricity@example.com",
                            ContractorName = "Electricity Experts",
                            ContractorPhone = "987-654-3210",
                            DateRequested = new DateTime(2024, 4, 21, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7929),
                            Description = "Outlets aren't working",
                            Priority = "Standard",
                            Status = "In Progress",
                            UserID = 4
                        },
                        new
                        {
                            ID = 3,
                            Category = "HVAC",
                            ContractorEmail = "hvac@example.com",
                            ContractorName = "HVAC Solutions",
                            ContractorPhone = "555-555-5555",
                            DateRequested = new DateTime(2024, 4, 16, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7934),
                            Description = "not sure what's wrong",
                            Priority = "Standard",
                            Status = "Completed",
                            UserID = 3
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerDocumentsModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DocumentsID")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocumentsID")
                        .IsUnique()
                        .HasFilter("[DocumentsID] IS NOT NULL");

                    b.HasIndex("ManagerID");

                    b.ToTable("ManagerDocuments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DocumentsID = 3,
                            ManagerID = 1
                        },
                        new
                        {
                            ID = 2,
                            DocumentsID = 4,
                            ManagerID = 1
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerFinanceModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<int>("MonthlyRentRecieved")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID")
                        .IsUnique();

                    b.ToTable("ManagerFinance");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ManagerID = 1,
                            MonthlyRentRecieved = 3000
                        },
                        new
                        {
                            ID = 2,
                            ManagerID = 2,
                            MonthlyRentRecieved = 2500
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "John",
                            Language = "English",
                            LastName = "Doe",
                            Location = "New York",
                            Phone = "123-456-7890",
                            Role = "Manager",
                            UserID = 1
                        },
                        new
                        {
                            ID = 2,
                            FirstName = "Jane",
                            Language = "Spanish",
                            LastName = "Smith",
                            Location = "Los Angeles",
                            Phone = "987-654-3210",
                            Role = "Manager",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerPropertiesModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyInfoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("PropertyInfoID")
                        .IsUnique()
                        .HasFilter("[PropertyInfoID] IS NOT NULL");

                    b.ToTable("ManagerProperties");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ManagerID = 1,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 2,
                            ManagerID = 1,
                            PropertyInfoID = 2
                        },
                        new
                        {
                            ID = 3,
                            ManagerID = 2,
                            PropertyInfoID = 3
                        },
                        new
                        {
                            ID = 4,
                            ManagerID = 2,
                            PropertyInfoID = 4
                        },
                        new
                        {
                            ID = 5,
                            ManagerID = 1,
                            PropertyInfoID = 5
                        },
                        new
                        {
                            ID = 6,
                            ManagerID = 1,
                            PropertyInfoID = 6
                        },
                        new
                        {
                            ID = 7,
                            ManagerID = 1,
                            PropertyInfoID = 7
                        },
                        new
                        {
                            ID = 8,
                            ManagerID = 1,
                            PropertyInfoID = 8
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.Property.MonthlyPropertyFinanceModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ExpenseAmount")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("PropertyInfoID")
                        .HasColumnType("int");

                    b.Property<int>("RevenueAmount")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyInfoID")
                        .IsUnique();

                    b.ToTable("MonthlyPropertyFinance");
                });

            modelBuilder.Entity("PropTrac_backend.Models.Property.PropertyExpenseModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFixedAmount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyInfoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyInfoID");

                    b.ToTable("PropertyExpense");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 300,
                            Date = new DateTime(2023, 11, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7529),
                            Description = "Mortgage",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 2,
                            Amount = 300,
                            Date = new DateTime(2023, 12, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7533),
                            Description = "Mortgage",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 3,
                            Amount = 300,
                            Date = new DateTime(2024, 1, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7538),
                            Description = "Mortgage",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 4,
                            Amount = 300,
                            Date = new DateTime(2024, 2, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7541),
                            Description = "Mortgage",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 5,
                            Amount = 300,
                            Date = new DateTime(2024, 3, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7544),
                            Description = "Mortgage",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 6,
                            Amount = 300,
                            Date = new DateTime(2024, 4, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7549),
                            Description = "Mortgage",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 7,
                            Amount = 200,
                            Date = new DateTime(2024, 4, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7552),
                            Description = "Maintenance Repair",
                            IsFixedAmount = false,
                            IsRecurring = false,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 8,
                            Amount = 250,
                            Date = new DateTime(2024, 5, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7555),
                            Description = "Maintenance Repair",
                            IsFixedAmount = false,
                            IsRecurring = false,
                            PropertyInfoID = 1
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.Property.PropertyRevenueModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFixedAmount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyInfoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyInfoID");

                    b.ToTable("PropertyRevenue");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 2000,
                            Date = new DateTime(2023, 11, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7577),
                            Description = "Rent",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 2,
                            Amount = 2000,
                            Date = new DateTime(2023, 12, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7648),
                            Description = "Rent",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 3,
                            Amount = 2000,
                            Date = new DateTime(2024, 1, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7652),
                            Description = "Rent",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 4,
                            Amount = 2000,
                            Date = new DateTime(2024, 2, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7656),
                            Description = "Rent",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 5,
                            Amount = 2000,
                            Date = new DateTime(2024, 3, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7659),
                            Description = "Rent",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 6,
                            Amount = 2000,
                            Date = new DateTime(2024, 4, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7663),
                            Description = "Rent",
                            IsFixedAmount = true,
                            IsRecurring = true,
                            PropertyInfoID = 1
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.PropertyInfoModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AmenFeatList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Baths")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseOrRoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseRent")
                        .HasColumnType("int");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<int>("Sqft")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PropertyInfo");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AmenFeatList = "Swimming Pool, Gym",
                            Baths = 2,
                            City = "Anytown",
                            Description = "Spacious family house",
                            HouseNumber = "123",
                            HouseOrRoomType = "House",
                            HouseRent = 2000,
                            Rooms = 3,
                            Sqft = 1800,
                            State = "CA",
                            Street = "Main St",
                            Zip = "12345"
                        },
                        new
                        {
                            ID = 2,
                            AmenFeatList = "Laundry, Parking, Backyard",
                            Baths = 1,
                            City = "Otherville",
                            Description = "Cozy condo with rooms for rent",
                            HouseNumber = "456",
                            HouseOrRoomType = "Rooms",
                            HouseRent = 1500,
                            Rooms = 2,
                            Sqft = 1000,
                            State = "NY",
                            Street = "Oak St",
                            Zip = "54321"
                        },
                        new
                        {
                            ID = 3,
                            AmenFeatList = "Garage, Patio",
                            Baths = 1,
                            City = "Smalltown",
                            Description = "Charming cottage",
                            HouseNumber = "789",
                            HouseOrRoomType = "House",
                            HouseRent = 1800,
                            Rooms = 2,
                            Sqft = 1200,
                            State = "TX",
                            Street = "Pine St",
                            Zip = "67890"
                        },
                        new
                        {
                            ID = 4,
                            AmenFeatList = "Utilities Included",
                            Baths = 1,
                            City = "Villageton",
                            Description = "Small home",
                            HouseNumber = "101",
                            HouseOrRoomType = "House",
                            HouseRent = 1200,
                            Rooms = 2,
                            Sqft = 800,
                            State = "FL",
                            Street = "Maple St",
                            Zip = "98765"
                        },
                        new
                        {
                            ID = 5,
                            AmenFeatList = "Fenced Yard, Fireplace",
                            Baths = 2,
                            City = "Hometown",
                            Description = "Classic single-family home",
                            HouseNumber = "222",
                            HouseOrRoomType = "House",
                            HouseRent = 2200,
                            Rooms = 3,
                            Sqft = 1700,
                            State = "CA",
                            Street = "Cedar St",
                            Zip = "54321"
                        },
                        new
                        {
                            ID = 6,
                            AmenFeatList = "Shared Kitchen, Pet Friendly",
                            Baths = 1,
                            City = "Homestead",
                            Description = "Roomy apartment for rent",
                            HouseNumber = "333",
                            HouseOrRoomType = "Rooms",
                            HouseRent = 1600,
                            Rooms = 2,
                            Sqft = 1100,
                            State = "NY",
                            Street = "Elm St",
                            Zip = "12345"
                        },
                        new
                        {
                            ID = 7,
                            AmenFeatList = "Furnished, Parking",
                            Baths = 1,
                            City = "Villageton",
                            Description = "Quaint cottage available",
                            HouseNumber = "444",
                            HouseOrRoomType = "House",
                            HouseRent = 1500,
                            Rooms = 2,
                            Sqft = 900,
                            State = "FL",
                            Street = "Birch St",
                            Zip = "98765"
                        },
                        new
                        {
                            ID = 8,
                            AmenFeatList = "Deck, Garden",
                            Baths = 2,
                            City = "Smalltown",
                            Description = "Lovely family home",
                            HouseNumber = "555",
                            HouseOrRoomType = "House",
                            HouseRent = 2000,
                            Rooms = 3,
                            Sqft = 1600,
                            State = "TX",
                            Street = "Willow St",
                            Zip = "67890"
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.PropertyMaintenanceModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("MaintenanceID")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyInfoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MaintenanceID")
                        .IsUnique()
                        .HasFilter("[MaintenanceID] IS NOT NULL");

                    b.HasIndex("PropertyInfoID");

                    b.ToTable("PropertyMaintenance");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            MaintenanceID = 1,
                            PropertyInfoID = 1
                        },
                        new
                        {
                            ID = 2,
                            MaintenanceID = 2,
                            PropertyInfoID = 2
                        },
                        new
                        {
                            ID = 3,
                            MaintenanceID = 3,
                            PropertyInfoID = 1
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.RoomInfoModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("PropertyInfoID")
                        .HasColumnType("int");

                    b.Property<int>("RoomRent")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyInfoID");

                    b.ToTable("RoomInfo");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PropertyInfoID = 2,
                            RoomRent = 800
                        },
                        new
                        {
                            ID = 2,
                            PropertyInfoID = 2,
                            RoomRent = 700
                        },
                        new
                        {
                            ID = 3,
                            PropertyInfoID = 6,
                            RoomRent = 800
                        },
                        new
                        {
                            ID = 4,
                            PropertyInfoID = 6,
                            RoomRent = 800
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.SecurityQuestionModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SecurityQuestion");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Question = "What is the name of your first pet?"
                        },
                        new
                        {
                            ID = 2,
                            Question = "What was your favorite teacher's name?"
                        },
                        new
                        {
                            ID = 3,
                            Question = "What was the name of your first stuffed animal?"
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.TenantModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DocumentsID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LeaseEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaseStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyInfoID")
                        .HasColumnType("int");

                    b.Property<int?>("RoomInfoID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocumentsID")
                        .IsUnique()
                        .HasFilter("[DocumentsID] IS NOT NULL");

                    b.HasIndex("PropertyInfoID");

                    b.HasIndex("RoomInfoID")
                        .IsUnique()
                        .HasFilter("[RoomInfoID] IS NOT NULL");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DocumentsID = 1,
                            FirstName = "Alice",
                            LastName = "Johnson",
                            LeaseEnd = new DateTime(2025, 5, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7405),
                            LeaseStart = new DateTime(2024, 5, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7324),
                            LeaseType = "Annual",
                            Phone = "123-456-7890",
                            PropertyInfoID = 1,
                            UserID = 3
                        },
                        new
                        {
                            ID = 2,
                            DocumentsID = 2,
                            FirstName = "Bob",
                            LastName = "Williams",
                            LeaseEnd = new DateTime(2024, 6, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7412),
                            LeaseStart = new DateTime(2024, 5, 1, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7411),
                            LeaseType = "Monthly",
                            Phone = "987-654-3210",
                            PropertyInfoID = 2,
                            RoomInfoID = 1,
                            UserID = 4
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.TenantPaymentInfoModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("DaysRemaining")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PaymentRecieved")
                        .HasColumnType("bit");

                    b.Property<int>("TenantID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TenantID")
                        .IsUnique();

                    b.ToTable("TenantPaymentInfo");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Balance = 1000,
                            DaysRemaining = 7,
                            DueDate = new DateTime(2024, 5, 8, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7434),
                            PaymentRecieved = false,
                            TenantID = 1
                        },
                        new
                        {
                            ID = 2,
                            Balance = 1500,
                            DaysRemaining = 9,
                            DueDate = new DateTime(2024, 5, 10, 14, 49, 40, 684, DateTimeKind.Local).AddTicks(7440),
                            PaymentRecieved = false,
                            TenantID = 2
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.UserModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityAnswerHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityAnswerSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SecurityQuestionID");

                    b.ToTable("UserInfo");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "john@example.com",
                            Hash = "C0ds7ZgzAudtGcUdGekCc6f68UJGvAbss3kZ/raByctwGs371Xc6dHpOD0rn7S/hKnmDtx2+8UA51AStSPVKq9cxmR+F0+856MIsPQONw6V2k4lQGOvlLSqynuxTxDHorz135jMnONcsUvlpNZAPd4sFLvyl+UtmBuTdcJAnAyO/tdqFp8zz59vDsfXbl+BFl74fjS6oKXNUoP9c3UE3C+nA+DLLD1AQ7nt6lfN5n4rwT/dYPKTWwxABBbnqggOF8KzaBJgQbLNwEkZy4Qt3bfWQW9CXIRnNNYIqYcWqBxr7Pq+LcCKQcnqaPy0FZeIoJtvzP5IBuLCO4z12wlxonw==",
                            IsManager = true,
                            Salt = "XlpaLHZ38H/po+cfRA9xO5+lQVHrnwmUKWhkKljMioDdQMHNJ4SvCul4w2vT3D5CX6+TVv05iiiq+DnPB1lU7w==",
                            SecurityAnswerHash = "security_hash1",
                            SecurityAnswerSalt = "security_salt1",
                            SecurityQuestionID = 1,
                            Username = "john_doe"
                        },
                        new
                        {
                            ID = 2,
                            Email = "jane@example.com",
                            Hash = "hash2",
                            IsManager = true,
                            Salt = "salt2",
                            SecurityAnswerHash = "security_hash2",
                            SecurityAnswerSalt = "security_salt2",
                            SecurityQuestionID = 2,
                            Username = "jane_smith"
                        },
                        new
                        {
                            ID = 3,
                            Email = "alice@example.com",
                            Hash = "tT4SHitmau4na/52n37MRtHu6D10lb1nO5F4smO0i7FXbw9q11yVDcommy1v2VVcz2jaElPcS8PDPaszno5xcpmZdCEG6dAhxPtXeeMZOjmA7rKG4kNFiiybGVXl7G6y0g8Jp+b/nm6pZQ0/n6PTAbVvhpR3TfjuGyjn9B0groTVShCQKCG7Q3kZ6TCHLybmPOZreMtrCiWBI7FOvgfvp65qLecz2y0LiHxNQNm1t1uj7xI9Ra6rGx6UCH2ZtQ5ze5HWxMYst0KSiVBs0DxjqsV2bEKVF/P4bTs0i3kYfWTHll+xijU0zH22G7h9mYCcyzwi6Fi4GfbWVK1Vod9l5w==",
                            IsManager = false,
                            Salt = "Yv1a9DATlKzlVcGUSR0N1Zj6VNlqZnyo/qJ8K+8k8taKU0Jxpy70K+U1jQ1nmGRNdcghGEtuuwUezV9MfKMi3g==",
                            SecurityAnswerHash = "security_hash3",
                            SecurityAnswerSalt = "security_salt3",
                            SecurityQuestionID = 3,
                            Username = "alice_johnson"
                        },
                        new
                        {
                            ID = 4,
                            Email = "bob@example.com",
                            Hash = "hash4",
                            IsManager = false,
                            Salt = "salt4",
                            SecurityAnswerHash = "security_hash4",
                            SecurityAnswerSalt = "security_salt4",
                            SecurityQuestionID = 1,
                            Username = "bob_williams"
                        });
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerDocumentsModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.DocumentsModel", "Documents")
                        .WithOne("ManagerDocuments")
                        .HasForeignKey("PropTrac_backend.Models.ManagerDocumentsModel", "DocumentsID");

                    b.HasOne("PropTrac_backend.Models.ManagerModel", "Manager")
                        .WithMany("ManagerDocuments")
                        .HasForeignKey("ManagerID");

                    b.Navigation("Documents");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerFinanceModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.ManagerModel", "Manager")
                        .WithOne("ManagerFinance")
                        .HasForeignKey("PropTrac_backend.Models.ManagerFinanceModel", "ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.UserModel", "User")
                        .WithOne("Manager")
                        .HasForeignKey("PropTrac_backend.Models.ManagerModel", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerPropertiesModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.ManagerModel", "Manager")
                        .WithMany("ManagerProperties")
                        .HasForeignKey("ManagerID");

                    b.HasOne("PropTrac_backend.Models.PropertyInfoModel", "PropertyInfo")
                        .WithOne("ManagerProperties")
                        .HasForeignKey("PropTrac_backend.Models.ManagerPropertiesModel", "PropertyInfoID");

                    b.Navigation("Manager");

                    b.Navigation("PropertyInfo");
                });

            modelBuilder.Entity("PropTrac_backend.Models.Property.MonthlyPropertyFinanceModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.PropertyInfoModel", "PropertyInfo")
                        .WithOne("MonthlyPropertyFinance")
                        .HasForeignKey("PropTrac_backend.Models.Property.MonthlyPropertyFinanceModel", "PropertyInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyInfo");
                });

            modelBuilder.Entity("PropTrac_backend.Models.Property.PropertyExpenseModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.PropertyInfoModel", "PropertyInfo")
                        .WithMany("PropertyExpense")
                        .HasForeignKey("PropertyInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyInfo");
                });

            modelBuilder.Entity("PropTrac_backend.Models.Property.PropertyRevenueModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.PropertyInfoModel", "PropertyInfo")
                        .WithMany("PropertyRevenue")
                        .HasForeignKey("PropertyInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyInfo");
                });

            modelBuilder.Entity("PropTrac_backend.Models.PropertyMaintenanceModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.MaintenanceModel", "Maintenance")
                        .WithOne("PropertyMaintenance")
                        .HasForeignKey("PropTrac_backend.Models.PropertyMaintenanceModel", "MaintenanceID");

                    b.HasOne("PropTrac_backend.Models.PropertyInfoModel", "PropertyInfo")
                        .WithMany("PropertyMaintenance")
                        .HasForeignKey("PropertyInfoID");

                    b.Navigation("Maintenance");

                    b.Navigation("PropertyInfo");
                });

            modelBuilder.Entity("PropTrac_backend.Models.RoomInfoModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.PropertyInfoModel", "PropertyInfo")
                        .WithMany("RoomInfo")
                        .HasForeignKey("PropertyInfoID");

                    b.Navigation("PropertyInfo");
                });

            modelBuilder.Entity("PropTrac_backend.Models.TenantModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.DocumentsModel", "Documents")
                        .WithOne("Tenant")
                        .HasForeignKey("PropTrac_backend.Models.TenantModel", "DocumentsID");

                    b.HasOne("PropTrac_backend.Models.PropertyInfoModel", "PropertyInfo")
                        .WithMany("Tenant")
                        .HasForeignKey("PropertyInfoID");

                    b.HasOne("PropTrac_backend.Models.RoomInfoModel", "RoomInfo")
                        .WithOne("Tenant")
                        .HasForeignKey("PropTrac_backend.Models.TenantModel", "RoomInfoID");

                    b.HasOne("PropTrac_backend.Models.UserModel", "User")
                        .WithOne("Tenant")
                        .HasForeignKey("PropTrac_backend.Models.TenantModel", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documents");

                    b.Navigation("PropertyInfo");

                    b.Navigation("RoomInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropTrac_backend.Models.TenantPaymentInfoModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.TenantModel", "Tenant")
                        .WithOne("TenantPaymentInfo")
                        .HasForeignKey("PropTrac_backend.Models.TenantPaymentInfoModel", "TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropTrac_backend.Models.UserModel", b =>
                {
                    b.HasOne("PropTrac_backend.Models.SecurityQuestionModel", "SecurityQuestion")
                        .WithMany()
                        .HasForeignKey("SecurityQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityQuestion");
                });

            modelBuilder.Entity("PropTrac_backend.Models.DocumentsModel", b =>
                {
                    b.Navigation("ManagerDocuments");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropTrac_backend.Models.MaintenanceModel", b =>
                {
                    b.Navigation("PropertyMaintenance");
                });

            modelBuilder.Entity("PropTrac_backend.Models.ManagerModel", b =>
                {
                    b.Navigation("ManagerDocuments");

                    b.Navigation("ManagerFinance");

                    b.Navigation("ManagerProperties");
                });

            modelBuilder.Entity("PropTrac_backend.Models.PropertyInfoModel", b =>
                {
                    b.Navigation("ManagerProperties");

                    b.Navigation("MonthlyPropertyFinance");

                    b.Navigation("PropertyExpense");

                    b.Navigation("PropertyMaintenance");

                    b.Navigation("PropertyRevenue");

                    b.Navigation("RoomInfo");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropTrac_backend.Models.RoomInfoModel", b =>
                {
                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropTrac_backend.Models.TenantModel", b =>
                {
                    b.Navigation("TenantPaymentInfo");
                });

            modelBuilder.Entity("PropTrac_backend.Models.UserModel", b =>
                {
                    b.Navigation("Manager")
                        .IsRequired();

                    b.Navigation("Tenant")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
